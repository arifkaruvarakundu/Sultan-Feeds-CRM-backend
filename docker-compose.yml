services:
  postgres_db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: crm_db
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate:
    build: .
    container_name: migrate
    working_dir: /app/crm_backend
    command: alembic upgrade head
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    
  fastapi_app:
    build: .
    container_name: fastapi_app
    command: >
      gunicorn crm_backend.main:app
      -w 4
      -k uvicorn.workers.UvicornWorker
      -b 0.0.0.0:8000
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    
  celery_worker:
    build: .
    container_name: celery_worker
    command: celery -A crm_backend.celery_app.celery worker --loglevel=info
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    
  celery_beat:
    build: .
    container_name: celery_beat
    command: celery -A crm_backend.celery_app.celery beat --loglevel=info
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - fastapi_app
  
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    
volumes:
  pgdata:


